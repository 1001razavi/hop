# TODO: There is probably a better way to do wait-for-publish, but this works for now.
# The goal is to wait for the SDK to be published before building the frontend, but
# the workflows are decoupled - the SDK publish is triggered on develop and
# the frontend build is triggered on production.

name: Build and Deploy Hop Frontend UI
on:
  push:
    branches:
      - production
      - preprod
      - mainnet
      - develop
      - sepolia
  workflow_dispatch:

jobs:
  set_environment:
    name: Set Environment
    if: contains(github.ref, 'production') || contains(github.ref, 'preprod') || contains(github.ref, 'mainnet') || contains(github.ref, 'goerli') || contains(github.ref, 'sepolia')
    outputs:
      env_name: ${{ steps.setenv.outputs.env_name }}
      dnslink_subdomain: ${{ steps.setdnslink.outputs.dnslink_subdomain }}
    runs-on: ubuntu-latest
    steps:
    - name: Set "environment" var
      id: setenv
      run: |
        if [[ "${GITHUB_REF#refs/heads/}" == "production" || "${GITHUB_REF#refs/heads/}" == "preprod" ]]
        then
          echo "env_name=production" >> $GITHUB_OUTPUT
        else
          echo "env_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        fi

    - name: Set dnslink var
      id: setdnslink
      run: |
        if [[ "${GITHUB_REF#refs/heads/}" == "production" ]]
        then
          echo "dnslink_subdomain=_dnslink.app" >> $GITHUB_OUTPUT
        else
          echo "dnslink_subdomain=_dnslink.${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        fi

  bump_version:
    name: Bump Github Release Version
    if: contains(github.ref, 'production')
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.github_tag_action.outputs.new_tag }}
      changelog: ${{ steps.github_tag_action.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b

  wait-for-publish: 
    name: Wait for SDK publish
    runs-on: ubuntu-latest
    steps:
      - name: Wait for SDK publish if necessary
        id: wait-for-publish
        working-directory: packages/sdk
        run: |
          while : ; do
            CURRENT_VERSION=$(npm info . --json | jq -r '."dist-tags".latest')
            LOCAL_VERSION=$(jq -r '.version' package.json)
            if [ "$CURRENT_VERSION" != "$LOCAL_VERSION" ]; then
              echo "Package found, proceeding with deployment."
              break
            else
              echo "Package not found, waiting..."
              sleep 10 # Wait for 10 seconds before retrying
            fi
          done

  build:
    if: contains(github.ref, 'production') || contains(github.ref, 'preprod') || contains(github.ref, 'mainnet') || contains(github.ref, 'goerli') || contains(github.ref, 'sepolia')
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [set_environment, wait-for-publish]
    outputs:
      hash: ${{ steps.upload.outputs.hash }}
    environment:
      name: ${{ needs.set_environment.outputs.env_name }}
    env:
      ENV_NAME: ${{ needs.set_environment.outputs.env_name }}
      RECORD_NAME: ${{ needs.set_environment.outputs.dnslink_subdomain }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b

      - name: Log set env vars
        run: |
          echo "ENV_NAME=${ENV_NAME}"
          echo "RECORD_NAME=${RECORD_NAME}"

      - name: Set up node
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org

      - name: Install node dependencies
        run: |
          npm install -g pnpm@8.15.7 only-allow@1.2.1 # required to build @eth-optimism packages
          pnpm install

      - name: Build the frontend app
        env:
          PUBLIC_URL: ${{ secrets.PUBLIC_URL }}
          REACT_APP_NETWORK: ${{ secrets.REACT_APP_NETWORK }}
          REACT_APP_BNC_DAPP_ID: ${{ secrets.REACT_APP_BNC_DAPP_ID }}
          REACT_APP_ENABLED_CHAINS: ${{ secrets.REACT_APP_ENABLED_CHAINS }}
          REACT_APP_ENABLED_TOKENS: ${{ secrets.REACT_APP_ENABLED_TOKENS }}
          REACT_APP_DEPRECATED_TOKENS: ${{ secrets.REACT_APP_DEPRECATED_TOKENS }}
          REACT_APP_DEPRECATED_POOLS: ${{ secrets.REACT_APP_DEPRECATED_POOLS }}
          REACT_APP_DISABLED_ROUTES: ${{ secrets.REACT_APP_DISABLED_ROUTES }}
          REACT_APP_WARNING_ROUTES: ${{ secrets.REACT_APP_WARNING_ROUTES }}
          REACT_APP_DISABLE_NATIVE_ASSET_TRANSFERS: ${{ secrets.REACT_APP_DISABLE_NATIVE_ASSET_TRANSFERS }}
          REACT_APP_DISABLED_ROUTES_NO_LIQUIDITY_WARNING_MESSAGE: ${{ secrets.REACT_APP_DISABLED_ROUTES_NO_LIQUIDITY_WARNING_MESSAGE }}
          REACT_APP_SHOW_BANNER_MESSAGE: ${{ secrets.REACT_APP_SHOW_BANNER_MESSAGE }}
          REACT_APP_BLOCKLIST_ENABLED: ${{ secrets.REACT_APP_BLOCKLIST_ENABLED }}
        run: pnpm --filter=sdk-core build && pnpm --filter=sdk build && pnpm --filter=frontend build

      - name: Write commit file
        uses: "DamianReeves/write-file-action@a432935930b2e351ec2d2792fc220717b656ec1c"
        with:
          path: packages/frontend/dist/cachebust
          write-mode: overwrite
          contents: ${{ github.sha }}

      - name: Pin to IPFS on Pinata
        id: upload
        uses: anantaramdas/ipfs-pinata-deploy-action@9f9c3b42b5d360352c4b768d98aff1309d62faa0
        with:
          pin-name: Hop ${{ github.sha }}
          path: './packages/frontend/dist'
          verbose: true
          pinata-api-key: ${{ secrets.IPFS_DEPLOY_PINATA__API_KEY }}
          pinata-secret-api-key: ${{ secrets.IPFS_DEPLOY_PINATA__SECRET_API_KEY }}

      - name: Update CloudFlare DNS with new IPFS hash
        env:
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
          RECORD_DOMAIN: 'hop.exchange'
          RECORD_NAME: ${{ needs.set_environment.outputs.dnslink_subdomain }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        uses: textileio/cloudflare-update-dnslink@30414a408191218c8259e932ebdf4cbb7c652fe8
        with:
          cid: ${{ steps.upload.outputs.hash }}

      - name: Convert CIDv0 to CIDv1
        id: convert_cidv0
        uses: uniswap/convert-cidv0-cidv1@c53a468c3602a85dd979c02ec4ddd9102849395e
        with:
          cidv0: ${{ steps.upload.outputs.hash }}

      - name: Set short sha
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        if: contains(github.ref, 'production')
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.bump_version.outputs.new_tag || steps.vars.outputs.sha_short }}
          release_name: Release ${{ needs.bump_version.outputs.new_tag || steps.vars.outputs.sha_short }}
          body: |
            IPFS hash of the deployment:
            - CIDv0: `${{ steps.upload.outputs.hash }}`
            - CIDv1: `${{ steps.convert_cidv0.outputs.cidv1 }}`
            The latest release is always accessible via our alias to the Cloudflare IPFS gateway at [app.hop.exchange](https://app.hop.exchange).
            You can also access the Hop Interface directly from an IPFS gateway.
            **Note**: The Hop interface uses [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) to remember your settings, such as slippage tolerance.
            **You should always use an IPFS gateway that enforces origin separation**, or our alias to the latest release at [app.hop.exchange](https://app.hop.exchange).
            Your Hop settings are never remembered across different URLs.
            IPFS gateways:
            - https://${{ steps.convert_cidv0.outputs.cidv1 }}.ipfs.cf-ipfs.com/
            - https://${{ steps.convert_cidv0.outputs.cidv1 }}.ipfs.dweb.link/
            - https://hop.mypinata.cloud/ipfs/${{ steps.upload.outputs.hash }}/
            - https://gateway.pinata.cloud/ipfs/${{ steps.upload.outputs.hash }}/
            - https://cloudflare-ipfs.com/ipfs/${{ steps.upload.outputs.hash }}/
            - https://gateway.ipfs.io/ipfs/${{ steps.upload.outputs.hash }}/
            - https://crustwebsites.net/ipfs/${{ steps.upload.outputs.hash }}/
            - [ipfs://${{ steps.upload.outputs.hash }}/](ipfs://${{ steps.upload.outputs.hash }}/)
            - https://hop.eth.limo/
            - https://hop.eth.link/
            ${{ needs.bump_version.outputs.changelog }}
